# This is an example setup for using welgl and websocket with Nginx

# This file contains http setup, Use cert bot to automatically edit this config

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/www/html;
	index index.html;

	server_name game.example.com;

	# webgl files
	location /game {
		try_files $uri $uri/ =404;
	}

	# websocket to game server
	# user connects to "ws://game.example.com:80/ws"
	location ~ /ws {
		set $backend http://127.0.0.1:7777;
		proxy_pass $backend;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}

	# On-disk Brotli-precompressed data files should be served with compression enabled:
	location ~ .+\.(data|symbols\.json)\.br$ {
		# Because this file is already pre-compressed on disk, disable the on-demand compression on it.
		# Otherwise nginx would attempt double compression.
		gzip off;
		add_header Content-Encoding br;
		default_type application/octet-stream;
	}

	# On-disk Brotli-precompressed JavaScript code files:
	location ~ .+\.js\.br$ {
		gzip off; # Do not attempt dynamic gzip compression on an already compressed file
		add_header Content-Encoding br;
		default_type application/javascript;
	}

	# On-disk Brotli-precompressed WebAssembly files:
	location ~ .+\.wasm\.br$ {
		gzip off; # Do not attempt dynamic gzip compression on an already compressed file
		add_header Content-Encoding br;
		# Enable streaming WebAssembly compilation by specifying the correct MIME type for
		# Wasm files.
		default_type application/wasm;
	}

	# On-disk gzip-precompressed data files should be served with compression enabled:
	location ~ .+\.(data|symbols\.json)\.gz$ {
		gzip off; # Do not attempt dynamic gzip compression on an already compressed file
		add_header Content-Encoding gzip;
		default_type application/gzip;
	}

	# On-disk gzip-precompressed JavaScript code files:
	location ~ .+\.js\.gz$ {
		gzip off; # Do not attempt dynamic gzip compression on an already compressed file
		add_header Content-Encoding gzip; # The correct MIME type here would be application/octet-stream, but due to Safari bug https://bugs.webkit.org/show_bug.cgi?id=247421, it's preferable to use MIME Type application/gzip instead.
		default_type application/javascript;
	}

	# On-disk gzip-precompressed WebAssembly files:
	location ~ .+\.wasm\.gz$ {
		gzip off; # Do not attempt dynamic gzip compression on an already compressed file
		add_header Content-Encoding gzip;
		# Enable streaming WebAssembly compilation by specifying the correct MIME type for
		# Wasm files.
		default_type application/wasm;
	}
}
